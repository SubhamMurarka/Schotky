# Main Nginx configuration
events {
    # Events context configurations
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/lib/lua/?.lua;;";
    error_log /var/log/nginx/error.log info;

    # Resolver for Docker's internal DNS
    resolver 127.0.0.11 valid=30s;

    upstream api_backend {
        server backend1:9000;
        server backend2:9000;
        server backend3:9000;
    }

    include       mime.types;
    default_type  application/octet-stream;

    # Define the server block
    server {
        listen 80;
        server_name localhost;

        # API endpoint with Lua logic
        location /api/v1 {
            access_by_lua_block {
                local redis = require "resty.redis"
                local murmur = require "murmurhash3"

                -- Redis server configuration
                local redis_servers = {
                    { host = "redis1", port = 6379 },
                    { host = "redis2", port = 6379 },
                    { host = "redis3", port = 6379 },
                }

                local rate_limit = 300  -- Maximum number of requests allowed per IP
                local client_ip = ngx.var.http_x_forwarded_for or ngx.var.remote_addr
                local key = client_ip

                ngx.log(ngx.INFO, "Key: ", key)

                -- Hash-based server selection
                local hash = murmur.hash32(key)
                local redis_index = (hash % 3) + 1
                ngx.log(ngx.INFO, "redis_index: ", redis_index)
                ngx.log(ngx.INFO, "hash: ", hash)

                local selected_redis = redis_servers[redis_index]
                local red = redis:new()
                red:set_timeout(5000)  -- 5-second timeout

                -- Connect to the selected Redis server
                local ok, err = red:connect(selected_redis.host, selected_redis.port)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    ngx.say("Redis connection failed: " .. err)
                    return ngx.exit(500)
                end

                -- Get the current count from Redis
                local res, err = red:get(key)
                if not res then
                    ngx.log(ngx.INFO, "Failed to get key from Redis: ", err)
                    return ngx.exit(500)
                end

                if res == ngx.null then
                    ngx.status=200
                    return
                else
                    local count = tonumber(res)
                    if count and count < rate_limit then
                        ngx.status=200
                        return
                    else
                        -- Rate limit exceeded
                        ngx.status = 429  -- Too Many Requests
                        ngx.say("Rate limit exceeded. Try again later.")
                        return ngx.exit(429)
                    end
                end

                -- Close the Redis connection
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to set Redis keepalive: ", err)
                end
            }

            # Proxying the request to the backend
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Default location block
        location / {
            # Lua logic to run before proxying
            access_by_lua_block {
                local redis = require "resty.redis"
                local murmur = require "murmurhash3"

                -- Redis server configuration
                local redis_servers = {
                    { host = "redis1", port = 6379 },
                    { host = "redis2", port = 6379 },
                    { host = "redis3", port = 6379 },
                }

                local rate_limit = 300  -- Maximum number of requests allowed per IP
                local client_ip = ngx.var.http_x_forwarded_for or ngx.var.remote_addr
                local key = client_ip

                ngx.log(ngx.INFO, "Key: ", key)

                -- Hash-based server selection
                local hash = murmur.hash32(key)
                local redis_index = (hash % 3) + 1
                ngx.log(ngx.INFO, "redis_index: ", redis_index)
                ngx.log(ngx.INFO, "hash: ", hash)

                local selected_redis = redis_servers[redis_index]
                local red = redis:new()
                red:set_timeout(5000)  -- 5-second timeout

                -- Connect to the selected Redis server
                local ok, err = red:connect(selected_redis.host, selected_redis.port)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    ngx.say("Redis connection failed: " .. err)
                    return ngx.exit(500)
                end

                -- Get the current count from Redis
                local res, err = red:get(key)
                if not res then
                    ngx.log(ngx.INFO, "Failed to get key from Redis: ", err)
                    return ngx.exit(500)
                end

                if res == ngx.null then
                    ngx.status=200
                    return
                else
                    local count = tonumber(res)
                    if count and count < rate_limit then
                        ngx.status=200
                        return
                    else
                        -- Rate limit exceeded
                        ngx.status = 429  -- Too Many Requests
                        ngx.say("Rate limit exceeded. Try again later.")
                        return ngx.exit(429)
                    end
                end

                -- Close the Redis connection
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to set Redis keepalive: ", err)
                end
            }

            # Proxying the request to the backend
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
}
